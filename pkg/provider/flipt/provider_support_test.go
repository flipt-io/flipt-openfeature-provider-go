// Code generated by mockery. DO NOT EDIT.

package flipt

import (
	context "context"

	flipt "go.flipt.io/flipt-grpc"

	mock "github.com/stretchr/testify/mock"
)

// mockService is an autogenerated mock type for the Service type
type mockService struct {
	mock.Mock
}

type mockService_Expecter struct {
	mock *mock.Mock
}

func (_m *mockService) EXPECT() *mockService_Expecter {
	return &mockService_Expecter{mock: &_m.Mock}
}

// Evaluate provides a mock function with given fields: ctx, flagKey, evalCtx
func (_m *mockService) Evaluate(ctx context.Context, flagKey string, evalCtx map[string]interface{}) (*flipt.EvaluationResponse, error) {
	ret := _m.Called(ctx, flagKey, evalCtx)

	var r0 *flipt.EvaluationResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) *flipt.EvaluationResponse); ok {
		r0 = rf(ctx, flagKey, evalCtx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flipt.EvaluationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]interface{}) error); ok {
		r1 = rf(ctx, flagKey, evalCtx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockService_Evaluate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Evaluate'
type mockService_Evaluate_Call struct {
	*mock.Call
}

// Evaluate is a helper method to define mock.On call
//   - ctx context.Context
//   - flagKey string
//   - evalCtx map[string]interface{}
func (_e *mockService_Expecter) Evaluate(ctx interface{}, flagKey interface{}, evalCtx interface{}) *mockService_Evaluate_Call {
	return &mockService_Evaluate_Call{Call: _e.mock.On("Evaluate", ctx, flagKey, evalCtx)}
}

func (_c *mockService_Evaluate_Call) Run(run func(ctx context.Context, flagKey string, evalCtx map[string]interface{})) *mockService_Evaluate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *mockService_Evaluate_Call) Return(_a0 *flipt.EvaluationResponse, _a1 error) *mockService_Evaluate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetFlag provides a mock function with given fields: ctx, flagKey
func (_m *mockService) GetFlag(ctx context.Context, flagKey string) (*flipt.Flag, error) {
	ret := _m.Called(ctx, flagKey)

	var r0 *flipt.Flag
	if rf, ok := ret.Get(0).(func(context.Context, string) *flipt.Flag); ok {
		r0 = rf(ctx, flagKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flipt.Flag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, flagKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockService_GetFlag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFlag'
type mockService_GetFlag_Call struct {
	*mock.Call
}

// GetFlag is a helper method to define mock.On call
//   - ctx context.Context
//   - flagKey string
func (_e *mockService_Expecter) GetFlag(ctx interface{}, flagKey interface{}) *mockService_GetFlag_Call {
	return &mockService_GetFlag_Call{Call: _e.mock.On("GetFlag", ctx, flagKey)}
}

func (_c *mockService_GetFlag_Call) Run(run func(ctx context.Context, flagKey string)) *mockService_GetFlag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockService_GetFlag_Call) Return(_a0 *flipt.Flag, _a1 error) *mockService_GetFlag_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTnewMockService interface {
	mock.TestingT
	Cleanup(func())
}

// newMockService creates a new instance of mockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockService(t mockConstructorTestingTnewMockService) *mockService {
	mock := &mockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
