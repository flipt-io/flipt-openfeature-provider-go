// Code generated by mockery. DO NOT EDIT.

package service_grpc

import (
	context "context"

	flipt "go.flipt.io/flipt-grpc"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// mockGrpcClient is an autogenerated mock type for the grpcClient type
type mockGrpcClient struct {
	mock.Mock
}

type mockGrpcClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockGrpcClient) EXPECT() *mockGrpcClient_Expecter {
	return &mockGrpcClient_Expecter{mock: &_m.Mock}
}

// Evaluate provides a mock function with given fields: ctx, in, opts
func (_m *mockGrpcClient) Evaluate(ctx context.Context, in *flipt.EvaluationRequest, opts ...grpc.CallOption) (*flipt.EvaluationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *flipt.EvaluationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *flipt.EvaluationRequest, ...grpc.CallOption) *flipt.EvaluationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flipt.EvaluationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *flipt.EvaluationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockGrpcClient_Evaluate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Evaluate'
type mockGrpcClient_Evaluate_Call struct {
	*mock.Call
}

// Evaluate is a helper method to define mock.On call
//  - ctx context.Context
//  - in *flipt.EvaluationRequest
//  - opts ...grpc.CallOption
func (_e *mockGrpcClient_Expecter) Evaluate(ctx interface{}, in interface{}, opts ...interface{}) *mockGrpcClient_Evaluate_Call {
	return &mockGrpcClient_Evaluate_Call{Call: _e.mock.On("Evaluate",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *mockGrpcClient_Evaluate_Call) Run(run func(ctx context.Context, in *flipt.EvaluationRequest, opts ...grpc.CallOption)) *mockGrpcClient_Evaluate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*flipt.EvaluationRequest), variadicArgs...)
	})
	return _c
}

func (_c *mockGrpcClient_Evaluate_Call) Return(_a0 *flipt.EvaluationResponse, _a1 error) *mockGrpcClient_Evaluate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetFlag provides a mock function with given fields: ctx, in, opts
func (_m *mockGrpcClient) GetFlag(ctx context.Context, in *flipt.GetFlagRequest, opts ...grpc.CallOption) (*flipt.Flag, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *flipt.Flag
	if rf, ok := ret.Get(0).(func(context.Context, *flipt.GetFlagRequest, ...grpc.CallOption) *flipt.Flag); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flipt.Flag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *flipt.GetFlagRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockGrpcClient_GetFlag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFlag'
type mockGrpcClient_GetFlag_Call struct {
	*mock.Call
}

// GetFlag is a helper method to define mock.On call
//  - ctx context.Context
//  - in *flipt.GetFlagRequest
//  - opts ...grpc.CallOption
func (_e *mockGrpcClient_Expecter) GetFlag(ctx interface{}, in interface{}, opts ...interface{}) *mockGrpcClient_GetFlag_Call {
	return &mockGrpcClient_GetFlag_Call{Call: _e.mock.On("GetFlag",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *mockGrpcClient_GetFlag_Call) Run(run func(ctx context.Context, in *flipt.GetFlagRequest, opts ...grpc.CallOption)) *mockGrpcClient_GetFlag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*flipt.GetFlagRequest), variadicArgs...)
	})
	return _c
}

func (_c *mockGrpcClient_GetFlag_Call) Return(_a0 *flipt.Flag, _a1 error) *mockGrpcClient_GetFlag_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTnewMockGrpcClient interface {
	mock.TestingT
	Cleanup(func())
}

// newMockGrpcClient creates a new instance of mockGrpcClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockGrpcClient(t mockConstructorTestingTnewMockGrpcClient) *mockGrpcClient {
	mock := &mockGrpcClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
